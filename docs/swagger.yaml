definitions:
  dto.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateProductRequest:
    properties:
      category_id:
        type: integer
      name:
        type: string
      price:
        type: number
    required:
    - category_id
    - name
    - price
    type: object
  dto.CreateUserRequest:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterRequest:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
  dto.UpdateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.UpdateProductRequest:
    properties:
      category_id:
        type: integer
      name:
        type: string
      price:
        type: number
    required:
    - category_id
    - name
    - price
    type: object
  dto.UpdateUserRequest:
    properties:
      name:
        type: string
      username:
        type: string
    required:
    - name
    - username
    type: object
  helper.APIResponse:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /api/categories:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Get list of categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with input data
      parameters:
      - description: Category Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - categories
  /api/categories/{id}:
    delete:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete category by ID
      tags:
      - categories
    get:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Get category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Update category by ID
      tags:
      - categories
  /api/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
      summary: Login and get JWT token
      tags:
      - auth
  /api/products:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Get list of products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with input data
      parameters:
      - description: Product Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /api/products/{id}:
    delete:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete product by ID
      tags:
      - products
    get:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Product Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Update product by ID
      tags:
      - products
  /api/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
      summary: Register a new user
      tags:
      - auth
  /api/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Get list of users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with input data
      parameters:
      - description: User Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update User Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.APIResponse'
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - users
swagger: "2.0"
